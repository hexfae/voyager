/// Structs for levels and level metadata.
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use surrealdb::sql::Thing;

/// All information about a level, as stored in the database.
#[derive(Debug, Serialize, Deserialize)]
pub struct Level {
    /// The level's name.
    pub name: String,

    /// The level's data, used by the game to construct levels.
    pub data: String,

    /// An author-chosen alias.
    ///
    /// Note: There are no accounts, authentication is instead
    /// handled using "keys".
    pub author: String,

    /// Inputs made by the uploader to complete
    /// the level, used for verification.
    ///
    /// Not sent with a GET request.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub inputs: Option<String>,

    /// TODO: write documentation
    pub author_brand: u64,

    /// TODO: write documentation
    pub burdens: u8,

    /// The level's ID/private key, generated by the server and sent to
    /// the player and stored on their device upon uploading the level.
    ///
    /// This is what's used to prove ownership of the level, for
    /// future editing, and should NEVER be generally viewable
    /// or sent anywhere except once to the level uploader.
    ///
    /// This is essentially the "edit code" system
    /// that <https://rentry.co/> uses.
    ///
    /// Not sent with a GET request.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<Thing>,

    /// The level's upload date.
    ///
    /// Optional because Voyager takes care of it, not the client.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upload_date: Option<DateTime<Utc>>,
}

impl Level {
    pub fn to_public(&mut self) {
        self.inputs = None;
        self.id = None;
    }
}
