use serde::Deserialize;
use surrealdb::sql::Thing;

/// SurrealDB record, used for logging.
#[derive(Debug, Deserialize)]
pub struct Record {
    /// Contains the table (always "level") and id
    /// (a random alphanumeric string) of the level.
    pub id: Thing,
}

/// Structs for levels and level metadata.
pub mod level {
    /// Structs for level metadata.
    pub mod metadata {
        use std::fmt::Display;

        use serde::{Deserialize, Serialize};
        use std::fmt::{Formatter, Result};
        use ulid::Ulid;

        /// The level's name.
        #[derive(Debug, Serialize, Deserialize)]
        pub struct Name(String);

        impl Display for Name {
            fn fmt(&self, f: &mut Formatter) -> Result {
                write!(f, "{}", self.0)
            }
        }

        /// The level's data, used by the game to construct levels.
        #[derive(Debug, Serialize, Deserialize)]
        pub struct Data(String);

        /// An author-chosen alias.
        ///
        /// Note: There are no accounts, authentication is instead
        /// handled using "keys".
        #[derive(Debug, Serialize, Deserialize)]
        pub struct Author(String);

        impl Display for Author {
            fn fmt(&self, f: &mut Formatter) -> Result {
                write!(f, "{}", self.0)
            }
        }

        /// Inputs made by the uploader to complete
        /// the level, used for verification.
        #[derive(Debug, Serialize, Deserialize)]
        pub struct Inputs(String);

        /// The level's private key, generated by the server and sent to
        /// the player and stored on their device upon uploading the level.
        ///
        /// This is what's used to prove ownership of the level, for
        /// future editing, and should NEVER be generally viewable
        /// or sent anywhere except once to the level uploader.
        ///
        /// This is essentially the "edit code" system
        /// that <https://rentry.co/> uses.
        #[derive(Debug, Serialize, Deserialize)]
        pub struct Key(pub Ulid);

        impl Key {
            /// Generates a new key in the form of
            /// [ULID](https://github.com/ulid/spec).
            pub fn new() -> Self {
                Key(Ulid::new())
            }
        }
    }

    use metadata::{Author, Data, Inputs, Key, Name};
    use serde::{Deserialize, Serialize};

    /// All information about a level.
    ///
    /// Essentially, what's stored in the database.
    #[derive(Debug, Serialize, Deserialize)]
    pub struct Level {
        pub name: Name,
        pub data: Data,
        pub author: Author,
    }

    /// All public information about a level.
    ///
    /// Essentially, what the user sees in-game.
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrivateLevel {
        pub level: Level,
        pub inputs: Inputs,
        pub key: Key,
    }

    impl PrivateLevel {
        /// Converts a level (what's stored in the database)
        /// to a public level (what's sent to the user).
        pub fn to_level(self) -> Level {
            self.level
        }
    }

    /// All creation-related information about a level.
    ///
    /// Essentially, what the user sends to
    /// the server when uploading a level.
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CreateLevel {
        pub level: Level,
        pub inputs: Inputs,
    }

    impl CreateLevel {
        /// Converts a create level (what's uploaded by the user)
        /// to a level (what's stored in the database). Generates
        /// a private key used for later editing the level.
        pub fn to_private_level(self) -> PrivateLevel {
            let key = Key::new();
            PrivateLevel {
                level: self.level,
                key,
                inputs: self.inputs,
            }
        }
    }
}
